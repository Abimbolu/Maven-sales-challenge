CREATE DATABASE MAVEN;
USE MAVEN;

select * from sales_pipeline;

-- Total revenue generated
SELECT sum(close_value) as Total_revenue
	FROM sales_pipeline
	where close_value is not null and close_value <>0;

--Total Sales by Sales agent
SELECT  sales_agent, SUM(close_value) AS Total_sales
	FROM sales_pipeline
	where close_value is not null and close_value <>0
	GROUP BY sales_agent
	ORDER BY total_sales desc;

--Average time to close deals by sales agent
SELECT sales_agent, avg(datediff(day,engage_date, close_date)) as avg_time
from sales_pipeline
where close_date is not null
group by sales_agent
order by avg_time;

--Managerial Effectiveness
SELECT manager,SUM(close_value) AS total_sales
from sales_pipeline
where close_value is not null and close_value <>0
group by manager
order by total_sales desc;

--Total sales per regional_office
SELECT regional_office, sum(close_value) AS Total_sales,
		FORMAT(SUM(close_value)*100.0/(SELECT SUM(close_value) FROM sales),'N2') AS sales_percentage
	FROM sales_pipeline
		where close_value is not null and close_value <>0
		GROUP BY regional_office
		ORDER BY Total_sales DESC;

--Total deal stage per sales agent
SELECT sales_agent,count(deal_stage),
	SUM(CASE WHEN deal_stage = 'won'THEN 1 else 0 end) AS WON,
	SUM(CASE WHEN deal_stage ='engaging' THEN 1 else 0 end) as engaging,
	SUM(CASE WHEN deal_stage = 'prospecting' then 1 else 0 end) as prospecting,
	SUM(CASE WHEN deal_stage = 'lost'THEN 1 else 0 end) AS lost
	FROM sales_pipeline
	GROUP BY sales_agent
	ORDER BY won desc;

--Total number of sales agent
	select regional_office, count(distinct sales_agent) 
		from sales_pipeline
	 group by regional_office;

select * from sales_pipeline;

-- Revenue generated by each product
select product, sum(close_value) as total_revenue
	from sales_pipeline
	where close_value is not null and close_value <>0
	group by product
	order by total_revenue desc;

--Total number of products sold, revenue generated, proift/loss
select product,sales_price ,count(product) as number_of_products,
	sales_price* count(product) as actual_total_price, sum(close_value) as revenue_per_product,
	case when(sum(close_value)-sales_price* count(product))>=0 then
	(sum(close_value)-sales_price* count(product))
	else (-(sum(close_value)-sales_price* count(product)))
	end as profit_loss
from sales_pipeline
where close_value is not null and close_value <>0
group by product, sales_price
order by revenue_per_product desc;

select * from sales_pipeline;

-- Percentage to revenue per product
select product,sum(close_value) as revenue, 
	format(cast(SUM(close_value)*100.0/(SELECT SUM(close_value) FROM Sales_Pipeline)as decimal (18,2)),'n') as sales_percentage
from sales_pipeline
where close_value is not null and close_value <>0
group by product
order by revenue desc;

--Top 10 company with highest revenue generated and total products
select top 10 account,sum(close_value) as revenue, count(product) AS total_products,
SUM(CASE WHEN product = 'GTX basic'THEN 1 else 0 end) AS GTX_basic,
	SUM(CASE WHEN product ='GTXPro' THEN 1 else 0 end) as GTX_Pro,
	SUM(CASE WHEN product = 'MG Special' then 1 else 0 end) as MG_Special,
	SUM(CASE WHEN product = 'MG Advanced'THEN 1 else 0 end) AS MG_Advanced,
	SUM(CASE WHEN product = 'GTX Plus Pro'THEN 1 else 0 end) AS GTX_Plus_Pro,
	SUM(CASE WHEN product ='GTX Plus Basic' THEN 1 else 0 end) as GTX_plus_basic,
	SUM(CASE WHEN product = 'GTK 500' then 1 else 0 end) as GTX_500
from sales_pipeline
where close_value is not null and close_value <>0
group by account
order by revenue desc;


select * from account;

-- Count of companies and sector
select count(distinct(account)) as total_company, count(distinct(sector)) as total_sector
from account;

--Revenue generated for each sector
select sector,sum(revenue) as total_revenue
from account
group by sector
order by total_revenue desc;

--Revenue generated per year
select  year_established,sum(revenue) as total_revenue
from account
group by year_established
order by total_revenue desc;

--Revenue generated per office location and total number of employees
select office_location, sum(revenue) as total_revenue, sum(employees) as total_employees
from account
group by office_location
order by total_revenue desc;

-- Total revenue per century
select sum(revenue) as total_revenue,
sum(case when year_established between  '1979' and '1999' then revenue else 0 end )as "1900's",
sum(case when year_established between '2000' and '2017' then revenue else 0 end) as "2000's"
from account;

